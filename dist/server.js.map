{"version":3,"sources":["../server/server.js"],"names":["app","use","static","urlencoded","extended","json","db","connect","then","connection","listen","console","log","catch","error","get","req","res","collection","find","toArray","issues","metadata","total_count","length","_metadata","records","status","message","post","newIssue","body","created","Date","err","validateIssue","insertOne","result","_id","insertedId","limit","next"],"mappings":";;AAAA;;;;AACA;;;;AACA;;AAGA;;;;AACA;;AACA;;;;;;AACA,MAAMA,MAAM,wBAAZ,C,CAAuB;AACvBA,IAAIC,GAAJ,CAAQ,kBAAQC,MAAR,CAAe,QAAf,CAAR;AACA;AACAF,IAAIC,GAAJ,CAAQ,qBAAWE,UAAX,CAAsB;AAC7BC,WAAU;AADmB,CAAtB,CAAR;;AAIA;AACAJ,IAAIC,GAAJ,CAAQ,qBAAWI,IAAX,EAAR;;AAEA,IAAIC,EAAJ;AACA,qBAAYC,OAAZ,CAAoB,kCAApB,EACEC,IADF,CACOC,cAAc;AACnBH,MAAKG,UAAL;AACAT,KAAIU,MAAJ,CAAW,IAAX,EAAiB,MAAM;AACtBC,UAAQC,GAAR,CAAY,0BAAZ;AACA,EAFD;AAGA,CANF,EAOEC,KAPF,CAOQC,SAAS;AACfH,SAAQC,GAAR,CAAY,QAAZ,EAAsBE,KAAtB;AACA,CATF;;AAWAd,IAAIe,GAAJ,CAAQ,aAAR,EAAuB,CAACC,GAAD,EAAMC,GAAN,KAAc;AACpCX,IAAGY,UAAH,CAAc,QAAd,EAAwBC,IAAxB,GAA+BC,OAA/B,GAAyCZ,IAAzC,CAA8Ca,UAAU;AACvD,QAAMC,WAAW;AAChBC,gBAAaF,OAAOG;AADJ,GAAjB;AAGAP,MAAIZ,IAAJ,CAAS;AACRoB,cAAWH,QADH;AAERI,YAASL;AAFD,GAAT;AAIA,EARD,EAQGR,KARH,CAQSC,SAAS;AACjBH,UAAQC,GAAR,CAAYE,KAAZ;AACAG,MAAIU,MAAJ,CAAW,GAAX,EAAgBtB,IAAhB,CAAqB;AACpBuB,YAAU,2BAA0Bd,KAAM;AADtB,GAArB;AAGA,EAbD;AAeA,CAhBD;;AAmBAd,IAAI6B,IAAJ,CAAS,aAAT,EAAwB,CAACb,GAAD,EAAMC,GAAN,KAAc;AACrC,OAAMa,WAAWd,IAAIe,IAArB;AACAD,UAASE,OAAT,GAAmB,IAAIC,IAAJ,EAAnB;AACA,KAAI,CAACH,SAASH,MAAd,EACCG,SAASH,MAAT,GAAkB,KAAlB;AACD,OAAMO,MAAM,gBAAMC,aAAN,CAAoBL,QAApB,CAAZ;AACA,KAAII,GAAJ,EAAS;AACRjB,MAAIU,MAAJ,CAAW,GAAX,EAAgBtB,IAAhB,CAAqB;AACpBuB,YAAU,oBAAmBM,GAAI;AADb,GAArB;AAGA;AACA;AACD5B,IAAGY,UAAH,CAAc,QAAd,EAAwBkB,SAAxB,CAAkCN,QAAlC,EAA4CtB,IAA5C,CAAiD6B;AAChD;AACA;AACA;AACA;;AAEA/B,IAAGY,UAAH,CAAc,QAAd,EAAwBC,IAAxB,CAA6B;AAC5BmB,OAAKD,OAAOE;AADgB,EAA7B,EAEGC,KAFH,CAES,CAFT,EAEYC,IAFZ,EAND,CAQoB;AARpB,GASEjC,IATF,CASOsB,YAAY;AAClBb,MAAIZ,IAAJ,CAASyB,QAAT;AACA,EAXD,EAWGjB,KAXH,CAWSC,SAAS;AACjBH,UAAQC,GAAR,CAAYE,KAAZ;AACAG,MAAIU,MAAJ,CAAW,GAAX,EAAgBtB,IAAhB,CAAqB;AACpBuB,YAAU,0BAAyBd,KAAM;AADrB,GAArB;AAGA,EAhBD;AAiBA,CA7BD","file":"server.js","sourcesContent":["import express from 'express';\r\nimport bodyParser from 'body-parser';\r\nimport {\r\n\tMongoClient\r\n} from 'mongodb';\r\nimport Issue from './issue.js';\r\nimport 'babel-polyfill';\r\nimport SourceMapSupport from 'source-map-support';\r\nconst app = express(); //实例化一个应用\r\napp.use(express.static('static'));\r\n// parse application/x-www-form-urlencoded \r\napp.use(bodyParser.urlencoded({\r\n\textended: false\r\n}))\r\n\r\n// parse application/json \r\napp.use(bodyParser.json())\r\n\r\nlet db;\r\nMongoClient.connect('mongodb://localhost/issuetracker')\r\n\t.then(connection => {\r\n\t\tdb = connection;\r\n\t\tapp.listen(3000, () => {\r\n\t\t\tconsole.log('App started on port 3000');\r\n\t\t})\r\n\t})\r\n\t.catch(error => {\r\n\t\tconsole.log('ERROR:', error);\r\n\t})\r\n\r\napp.get('/api/issues', (req, res) => {\r\n\tdb.collection('issues').find().toArray().then(issues => {\r\n\t\tconst metadata = {\r\n\t\t\ttotal_count: issues.length\r\n\t\t};\r\n\t\tres.json({\r\n\t\t\t_metadata: metadata,\r\n\t\t\trecords: issues\r\n\t\t})\r\n\t}).catch(error => {\r\n\t\tconsole.log(error);\r\n\t\tres.status(500).json({\r\n\t\t\tmessage: `Internal Server Error : ${error}`\r\n\t\t});\r\n\t});\r\n\r\n})\r\n\r\n\r\napp.post('/api/issues', (req, res) => {\r\n\tconst newIssue = req.body;\r\n\tnewIssue.created = new Date();\r\n\tif (!newIssue.status)\r\n\t\tnewIssue.status = 'New';\r\n\tconst err = Issue.validateIssue(newIssue)\r\n\tif (err) {\r\n\t\tres.status(422).json({\r\n\t\t\tmessage: `Invalid request: ${err}`\r\n\t\t});\r\n\t\treturn;\r\n\t}\r\n\tdb.collection('issues').insertOne(newIssue).then(result =>\r\n\t\t//下面是自己定义_id,自己传递回这个对象\r\n\t\t// result.ops[0]._id = 1;\r\n\t\t// console.log(result.ops[0]);\r\n\t\t// return result.ops[0];\r\n\r\n\t\tdb.collection('issues').find({\r\n\t\t\t_id: result.insertedId\r\n\t\t}).limit(1).next() //limit(1)作用是啥\r\n\t).then(newIssue => {\r\n\t\tres.json(newIssue);\r\n\t}).catch(error => {\r\n\t\tconsole.log(error);\r\n\t\tres.status(500).json({\r\n\t\t\tmessage: `Internal Server Error: ${error}`\r\n\t\t});\r\n\t});\r\n});"]}